{
	"info": {
		"_postman_id": "ace2160b-a584-421a-aaf9-bbeceecbc7a4",
		"name": "BOOKSTORE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24545160"
	},
	"item": [
		{
			"name": "API Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status 201\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"if(pm.response.to.have.status(201)){\r",
							"    resp = pm.response.json()\r",
							"    //resp = JSON.parse(responseBody)\r",
							"    pm.collectionVariables.set(\"bearerToken\", resp.accessToken)\r",
							"}\r",
							"console.log(resp.accessToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomFullName}}\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api-clients",
					"host": [
						"{{url}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for tatus code 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"\r",
							"response = JSON.parse(responseBody)\r",
							"//response = pm.response.json()\r",
							"//pierwsza dostepna z kategorii non-fiction\r",
							"mybook = response.filter((book) => book.available == true)\r",
							"\r",
							"//console.log(mybook[0].id)\r",
							"pm.collectionVariables.set(\"bookID\", mybook[0].id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/books?type=non-fiction",
					"host": [
						"{{url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status 200\", ()=> {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"response = pm.response.json()\r",
							"\r",
							"pm.test(\"Check detailed conditions\", function() {\r",
							"    pm.expect(response['current-stock']).to.be.above(0)\r",
							"    pm.expect(response.price).to.be.below(100)\r",
							"    pm.expect(response.type).to.be.equal(\"non-fiction\")\r",
							"    pm.expect(response.id).to.eql(pm.collectionVariables.get(\"bookID\"))\r",
							"    pm.expect(response.available).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/books/:bookId",
					"host": [
						"{{url}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status code 201\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"if(pm.response.to.have.status(201)){\r",
							"    resp = pm.response.json()\r",
							"    pm.collectionVariables.set(\"orderID\", resp.orderId)\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": \"{{bookID}}\",\r\n  \"customerName\": \"{{customerName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "see an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"resp = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Check bookID and Customer name\", ()=>{\r",
							"    pm.expect(resp.bookId).to.eql(pm.collectionVariables.get(\"bookID\"))\r",
							"    pm.expect(resp.customerName).to.equal(pm.collectionVariables.get(\"customerName\"))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status 204\", function(){\r",
							"    pm.response.to.have.status(204)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"{{customerName}}-updated\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status 200\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"//gdyby bylo wiecej zamowien to filtruje ostatnie\r",
							"response = pm.response.json();\r",
							"orderedBook = response.filter((book)=> book.id == pm.collectionVariables.get(\"orderID\"))\r",
							"//console.log(orderedBook[0].customerName)\r",
							"\r",
							"name = String(pm.collectionVariables.get(\"customerName\")+\"-updated\")\r",
							"\r",
							"pm.test(\"Check if last order's customer name was updated\", ()=>{\r",
							"    pm.expect(orderedBook[0].customerName).to.eql(name)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status 204\", ()=>{\r",
							"    pm.response.to.have.status(204)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "all orders Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for status 200\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Check if last orderID deleted\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"orderID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "bearerToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookID",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderID",
			"value": "",
			"type": "string"
		},
		{
			"key": "customerName",
			"value": "Wojtek",
			"type": "string"
		}
	]
}